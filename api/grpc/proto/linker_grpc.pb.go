// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/grpc/proto/linker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkerClient is the client API for Linker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkerClient interface {
	SetLink(ctx context.Context, in *SetLinkRequest, opts ...grpc.CallOption) (*SetLinkResponse, error)
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*BaseLinksResponse, error)
	SetBatchLinks(ctx context.Context, in *CorrelationLinksRequest, opts ...grpc.CallOption) (*CorrelationLinksResponse, error)
	DeleteLinks(ctx context.Context, in *DeleteLinksRequest, opts ...grpc.CallOption) (*DeleteLinksResponse, error)
	Statistic(ctx context.Context, in *StatisticRequest, opts ...grpc.CallOption) (*StatisticResponse, error)
}

type linkerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkerClient(cc grpc.ClientConnInterface) LinkerClient {
	return &linkerClient{cc}
}

func (c *linkerClient) SetLink(ctx context.Context, in *SetLinkRequest, opts ...grpc.CallOption) (*SetLinkResponse, error) {
	out := new(SetLinkResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/SetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/GetLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*BaseLinksResponse, error) {
	out := new(BaseLinksResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/GetUserLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) SetBatchLinks(ctx context.Context, in *CorrelationLinksRequest, opts ...grpc.CallOption) (*CorrelationLinksResponse, error) {
	out := new(CorrelationLinksResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/SetBatchLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) DeleteLinks(ctx context.Context, in *DeleteLinksRequest, opts ...grpc.CallOption) (*DeleteLinksResponse, error) {
	out := new(DeleteLinksResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/DeleteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) Statistic(ctx context.Context, in *StatisticRequest, opts ...grpc.CallOption) (*StatisticResponse, error) {
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, "/proto.Linker/Statistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkerServer is the server API for Linker service.
// All implementations must embed UnimplementedLinkerServer
// for forward compatibility
type LinkerServer interface {
	SetLink(context.Context, *SetLinkRequest) (*SetLinkResponse, error)
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	GetUserLinks(context.Context, *GetUserLinksRequest) (*BaseLinksResponse, error)
	SetBatchLinks(context.Context, *CorrelationLinksRequest) (*CorrelationLinksResponse, error)
	DeleteLinks(context.Context, *DeleteLinksRequest) (*DeleteLinksResponse, error)
	Statistic(context.Context, *StatisticRequest) (*StatisticResponse, error)
	mustEmbedUnimplementedLinkerServer()
}

// UnimplementedLinkerServer must be embedded to have forward compatible implementations.
type UnimplementedLinkerServer struct {
}

func (UnimplementedLinkerServer) SetLink(context.Context, *SetLinkRequest) (*SetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLink not implemented")
}
func (UnimplementedLinkerServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedLinkerServer) GetUserLinks(context.Context, *GetUserLinksRequest) (*BaseLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinks not implemented")
}
func (UnimplementedLinkerServer) SetBatchLinks(context.Context, *CorrelationLinksRequest) (*CorrelationLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBatchLinks not implemented")
}
func (UnimplementedLinkerServer) DeleteLinks(context.Context, *DeleteLinksRequest) (*DeleteLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinks not implemented")
}
func (UnimplementedLinkerServer) Statistic(context.Context, *StatisticRequest) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistic not implemented")
}
func (UnimplementedLinkerServer) mustEmbedUnimplementedLinkerServer() {}

// UnsafeLinkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkerServer will
// result in compilation errors.
type UnsafeLinkerServer interface {
	mustEmbedUnimplementedLinkerServer()
}

func RegisterLinkerServer(s grpc.ServiceRegistrar, srv LinkerServer) {
	s.RegisterService(&Linker_ServiceDesc, srv)
}

func _Linker_SetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).SetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/SetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).SetLink(ctx, req.(*SetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_GetUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).GetUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/GetUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).GetUserLinks(ctx, req.(*GetUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_SetBatchLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrelationLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).SetBatchLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/SetBatchLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).SetBatchLinks(ctx, req.(*CorrelationLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_DeleteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).DeleteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/DeleteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).DeleteLinks(ctx, req.(*DeleteLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_Statistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).Statistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Linker/Statistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).Statistic(ctx, req.(*StatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Linker_ServiceDesc is the grpc.ServiceDesc for Linker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Linker",
	HandlerType: (*LinkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLink",
			Handler:    _Linker_SetLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _Linker_GetLink_Handler,
		},
		{
			MethodName: "GetUserLinks",
			Handler:    _Linker_GetUserLinks_Handler,
		},
		{
			MethodName: "SetBatchLinks",
			Handler:    _Linker_SetBatchLinks_Handler,
		},
		{
			MethodName: "DeleteLinks",
			Handler:    _Linker_DeleteLinks_Handler,
		},
		{
			MethodName: "Statistic",
			Handler:    _Linker_Statistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/linker.proto",
}
